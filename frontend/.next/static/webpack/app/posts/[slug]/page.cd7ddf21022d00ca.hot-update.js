"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/posts/[slug]/page",{

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   api: function() { return /* binding */ api; }\n/* harmony export */ });\nconst resolveBaseUrl = ()=>{\n    if (false) {}\n    return \"/api\" || 0;\n};\nclass ApiClient {\n    async request(endpoint) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const base = resolveBaseUrl();\n        const url = \"\".concat(base).concat(endpoint);\n        const token = this.getAuthToken();\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...token && {\n                    Authorization: \"Bearer \".concat(token)\n                },\n                ...options.headers\n            },\n            ...options\n        };\n        const response = await fetch(url, config);\n        if (!response.ok) {\n            const error = await response.json().catch(()=>({\n                    error: \"Network error\"\n                }));\n            throw new Error(error.error || \"HTTP \".concat(response.status));\n        }\n        return response.json();\n    }\n    getAuthToken() {\n        if (false) {}\n        return localStorage.getItem(\"auth_token\");\n    }\n    // Auth endpoints\n    async signup(data) {\n        return this.request(\"/auth/signup\", {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    async login(data) {\n        return this.request(\"/auth/login\", {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    async forgotPassword(data) {\n        return this.request(\"/auth/forgot-password\", {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    // Posts endpoints\n    async getPosts(params) {\n        const searchParams = new URLSearchParams();\n        if (params) {\n            Object.entries(params).forEach((param)=>{\n                let [key, value] = param;\n                if (value !== undefined) searchParams.append(key, String(value));\n            });\n        }\n        return this.request(\"/posts?\".concat(searchParams.toString()));\n    }\n    async getPost(slug) {\n        return this.request(\"/posts/\".concat(slug));\n    }\n    async createPost(data) {\n        return this.request(\"/posts\", {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    async updatePost(id, data) {\n        return this.request(\"/posts/\".concat(id), {\n            method: \"PUT\",\n            body: JSON.stringify(data)\n        });\n    }\n    async deletePost(id, hard) {\n        return this.request(\"/posts/\".concat(id, \"?hard=\").concat(hard), {\n            method: \"DELETE\"\n        });\n    }\n    // Categories endpoints (backend path is '/catagories')\n    async getCategories() {\n        return this.request(\"/catagories\");\n    }\n    async getCategory(slug) {\n        return this.request(\"/catagories/\".concat(slug));\n    }\n    async createCategory(data) {\n        return this.request(\"/catagories\", {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    async updateCategory(id, data) {\n        return this.request(\"/catagories/\".concat(id), {\n            method: \"PUT\",\n            body: JSON.stringify(data)\n        });\n    }\n    async deleteCategory(id) {\n        return this.request(\"/catagories/\".concat(id), {\n            method: \"DELETE\"\n        });\n    }\n    // Comments endpoints\n    async getComments(postId) {\n        return this.request(\"/comments/post/\".concat(postId));\n    }\n    async createComment(data) {\n        return this.request(\"/comments\", {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    async updateComment(id, data) {\n        return this.request(\"/comments/\".concat(id), {\n            method: \"PUT\",\n            body: JSON.stringify(data)\n        });\n    }\n    async deleteComment(id) {\n        return this.request(\"/comments/\".concat(id), {\n            method: \"DELETE\"\n        });\n    }\n    // Reactions endpoints\n    async getPostReactions(postId) {\n        return this.request(\"/posts/\".concat(postId, \"/reactions\"));\n    }\n    async reactToPost(postId, type) {\n        return this.request(\"/posts/\".concat(postId, \"/reactions\"), {\n            method: \"POST\",\n            body: JSON.stringify({\n                type\n            })\n        });\n    }\n    async getCommentReactions(commentId) {\n        return this.request(\"/comments/\".concat(commentId, \"/reactions\"));\n    }\n    async reactToComment(commentId, type) {\n        return this.request(\"/comments/\".concat(commentId, \"/reactions\"), {\n            method: \"POST\",\n            body: JSON.stringify({\n                type\n            })\n        });\n    }\n    // Shares endpoints (backend base route is '/share')\n    async getPostShares(postIdOrSlug) {\n        return this.request(\"/share/\".concat(postIdOrSlug, \"/shares\"));\n    }\n    async sharePost(postIdOrSlug, platform) {\n        return this.request(\"/share/\".concat(postIdOrSlug, \"/share\"), {\n            method: \"POST\",\n            body: JSON.stringify({\n                platform\n            })\n        });\n    }\n}\nconst api = new ApiClient();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ })

});